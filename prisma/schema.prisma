generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InfractionType {
  Warn
  Mute
  Kick
  Ban
  Unmute
  Unban
}

enum TaskType {
  Mute
  Ban
}

enum InfractionFlag {
  Automatic
  Native
  Quick
}

enum ReportStatus {
  Pending
  Disregarded
  Accepted
  Denied
}

enum RequestStatus {
  Pending
  Accepted
  Denied
}

model Guild {
  id String @id

  // Command settings

  commandDisabledList      String[]
  commandErrorTTL          Int      @default(7500)
  commandTemporaryReplyTTL Int      @default(5000)

  // Component settings

  componentErrorTTL          Int @default(5000)
  componentTemporaryReplyTTL Int @default(5000)

  // Report settings

  messageReportsEnabled             Boolean  @default(false)
  messageReportsWebhook             String?
  messageReportsImmuneRoles         String[]
  messageReportsPingRoles           String[]
  messageReportsBlacklist           String[]
  messageReportsRequireMember       Boolean  @default(true)
  messageReportsDisregardAfter      BigInt   @default(2592000000)
  messageReportsNotifyStatus        Boolean  @default(true)
  messageReportsRequireAcceptReason Boolean  @default(false)
  messageReportsRequireDenyReason   Boolean  @default(false)

  userReportsEnabled             Boolean  @default(false)
  userReportsWebhook             String?
  userReportsImmuneRoles         String[]
  userReportsPingRoles           String[]
  userReportsBlacklist           String[]
  userReportsRequireMember       Boolean  @default(true)
  userReportsDisregardAfter      BigInt   @default(2592000000)
  userReportsNotifyStatus        Boolean  @default(true)
  userReportsRequireAcceptReason Boolean  @default(false)
  userReportsRequireDenyReason   Boolean  @default(false)

  reportLoggingEnabled Boolean @default(true)
  reportLoggingWebhook String?

  // Request settings

  banRequestsEnabled     Boolean  @default(false)
  banRequestsWebhook     String?
  banRequestsImmuneRoles String[]
  banRequestsImmuneUsers String[]

  muteRequestsEnabled     Boolean  @default(false)
  muteRequestsWebhook     String?
  muteRequestsImmuneRoles String[]
  muteRequestsImmuneUsers String[]

  // Infraction settings

  requireWarnReason   Boolean @default(true)
  requireMuteReason   Boolean @default(true)
  requireKickReason   Boolean @default(true)
  requireBanReason    Boolean @default(true)
  requireUnmuteReason Boolean @default(false)
  requireUnbanReason  Boolean @default(false)

  notifyWarnAction   Boolean @default(true)
  notifyMuteAction   Boolean @default(true)
  notifyKickAction   Boolean @default(true)
  notifyBanAction    Boolean @default(true)
  notifyUnmuteAction Boolean @default(true)

  defaultWarnDuration BigInt @default(0)
  defaultMuteDuration BigInt @default(0)
  defaultBanDuration  BigInt @default(0)

  infractionLoggingEnabled Boolean @default(true)
  infractionLoggingWebhook String?

  // Relations

  infractions    Infraction[]
  messageReports MessageReport[]
  userReports    UserReport[]
  banRequests    BanRequest[]
  muteRequests   MuteRequest[]
  tasks          Task[]
}

model Infraction {
  id         Int              @id @default(autoincrement())
  guildId    String
  targetId   String
  executorId String
  requestId  String?
  type       InfractionType   @default(Warn)
  reason     String
  createdAt  BigInt
  expiresAt  BigInt?
  flags      InfractionFlag[]

  task  Task?
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Task {
  id           Int      @id @default(autoincrement())
  guildId      String
  targetId     String
  infractionId Int      @unique
  type         TaskType
  expiresAt    BigInt

  infraction Infraction? @relation(fields: [infractionId], references: [id], onDelete: Cascade)
  guild      Guild       @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([targetId, guildId, type])
}

model MessageReport {
  // ID of the log
  id         String  @id
  guildId    String
  messageId  String
  messageUrl String
  channelId  String
  authorId   String
  content    String?

  reportedAt   BigInt
  reportedBy   String
  reportReason String

  status ReportStatus @default(Pending)

  resolvedAt BigInt?
  resolvedBy String?

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model UserReport {
  // ID of the log
  id       String @id
  guildId  String
  targetId String

  reportedAt   BigInt
  reportedBy   String
  reportReason String

  status ReportStatus @default(Pending)

  resolvedAt BigInt?
  resolvedBy String?

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model BanRequest {
  // ID of the log
  id       String @id
  guildId  String
  targetId String

  status RequestStatus @default(Pending)

  resolvedAt BigInt?
  resolvedBy String?

  requestedAt BigInt
  requestedBy String

  expiresAt BigInt?
  reason    String

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model MuteRequest {
  // ID of the log
  id       String @id
  guildId  String
  targetId String

  status RequestStatus @default(Pending)

  resolvedAt BigInt?
  resolvedBy String?

  requestedAt BigInt
  requestedBy String

  expiresAt BigInt
  reason    String

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}
