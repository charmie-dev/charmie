generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum InfractionType {
  Warn
  Mute
  Kick
  Ban
  Unmute
  Unban
}

enum TaskType {
  Mute
  Ban
}

enum InfractionFlag {
  Automatic
  Native
}

enum ReportStatus {
  Pending
  Disregarded
  Accepted
  Denied
}

enum RequestStatus {
  Pending
  Disregarded
  Accepted
  Denied
}

enum PermissionEnum {
  SearchInfractions
  ManageMessageReports
  ManageUserReports
  ManageMuteRequests
  ManageBanRequests
  DeleteInfractions
  UpdateInfractions
  LockChannels
  UnlockChannels
  StartLockdown
  EndLockdown
  OverrideLockdownNotificatons
}

model Guild {
  id String @id @map("_id")

  notificationWebhook String?

  // Command settings

  commandDisabledList      String[]
  commandErrorTTL          Int      @default(7500)
  commandTemporaryReplyTTL Int      @default(5000)
  commandEphemeralReply    Boolean  @default(true)

  // Component settings

  componentErrorTTL          Int @default(5000)
  componentTemporaryReplyTTL Int @default(5000)

  // Report settings

  messageReportsEnabled             Boolean  @default(false)
  messageReportsWebhook             String?
  messageReportsImmuneRoles         String[]
  messageReportsPingRoles           String[]
  messageReportsBlacklist           String[]
  messageReportsRequireMember       Boolean  @default(true)
  messageReportsDisregardAfter      BigInt   @default(2592000000)
  messageReportsNotifyStatus        Boolean  @default(true)
  messageReportsRequireAcceptReason Boolean  @default(false)
  messageReportsRequireDenyReason   Boolean  @default(true)

  userReportsEnabled             Boolean  @default(false)
  userReportsWebhook             String?
  userReportsImmuneRoles         String[]
  userReportsPingRoles           String[]
  userReportsBlacklist           String[]
  userReportsRequireMember       Boolean  @default(true)
  userReportsDisregardAfter      BigInt   @default(2592000000)
  userReportsNotifyStatus        Boolean  @default(true)
  userReportsRequireAcceptReason Boolean  @default(false)
  userReportsRequireDenyReason   Boolean  @default(true)

  reportLoggingEnabled Boolean @default(true)
  reportLoggingWebhook String?

  // Request settings

  banRequestsEnabled             Boolean  @default(false)
  banRequestsWebhook             String?
  banRequestsImmuneRoles         String[]
  banRequestsPingRoles           String[]
  banRequestsRequireAcceptReason Boolean  @default(false)
  banRequestsRequireDenyReason   Boolean  @default(true)

  muteRequestsEnabled             Boolean  @default(false)
  muteRequestsWebhook             String?
  muteRequestsImmuneRoles         String[]
  muteRequestsPingRoles           String[]
  muteRequestsRequireAcceptReason Boolean  @default(false)
  muteRequestsRequireDenyReason   Boolean  @default(true)

  requestLoggingEnabled Boolean @default(true)
  requestLoggingWebhook String?

  // Infraction settings

  requireWarnReason   Boolean @default(true)
  requireMuteReason   Boolean @default(true)
  requireKickReason   Boolean @default(true)
  requireBanReason    Boolean @default(true)
  requireUnmuteReason Boolean @default(false)
  requireUnbanReason  Boolean @default(false)

  notifyWarnAction   Boolean @default(true)
  notifyMuteAction   Boolean @default(true)
  notifyKickAction   Boolean @default(true)
  notifyBanAction    Boolean @default(true)
  notifyUnmuteAction Boolean @default(true)

  defaultWarnDuration BigInt @default(0)
  defaultMuteDuration BigInt @default(0)
  defaultBanDuration  BigInt @default(0)

  defaultAdditionalWarnInfo   String?
  defaultAdditionalMuteInfo   String?
  defaultAdditionalKickInfo   String?
  defaultAdditionalBanInfo    String?
  defaultAdditionalUnmuteInfo String?
  defaultAdditionalUnbanInfo  String?

  nativeModerationIntegration Boolean @default(true)

  infractionLoggingEnabled Boolean @default(true)
  infractionLoggingWebhook String?

  // Message logging settings

  messageLoggingEnabled         Boolean  @default(true)
  messageLoggingWebhook         String?
  messageLoggingIgnoredChannels String[]

  // Lockdown settings

  lockdownChannels        String[]
  lockdownNotify          Boolean  @default(true)
  lockdownRequireReason   Boolean  @default(true)
  lockdownDisplayExecutor Boolean  @default(false)
  lockdownOverrides       BigInt   @default(377957124160) // SendMessages + CreatePublicThreads + CreatePrivateThreads + SendMessagesInThreads + AddReactions

  // Permissions

  permissions Permission[]

  // Ephemeral scopes

  ephemeralScopes EphemeralScope[]

  // Relations

  moderationCommands ModerationCommand[]
  infractions        Infraction[]
  channelLocks       ChannelLock[]
  messageReports     MessageReport[]
  userReports        UserReport[]
  banRequests        BanRequest[]
  muteRequests       MuteRequest[]
  messages           Message[]
  tasks              Task[]
}

model Infraction {
  id         String          @id @map("_id")
  guildId    String
  targetId   String
  executorId String
  type       InfractionType  @default(Warn)
  reason     String
  createdAt  BigInt
  expiresAt  BigInt?
  flag       InfractionFlag?

  // These are only set if the infraction was created as a result of a moderation request
  requestId       String?
  requestAuthorId String?

  task  Task?
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Task {
  id           String   @id @map("_id")
  guildId      String
  targetId     String
  infractionId String   @unique
  type         TaskType
  expiresAt    BigInt

  infraction Infraction? @relation(fields: [infractionId], references: [id], onDelete: Cascade)
  guild      Guild       @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([targetId, guildId, type])
}

model MessageReport {
  // ID of the log
  id          String  @id @map("_id")
  guildId     String
  messageId   String
  referenceId String?
  messageUrl  String
  channelId   String
  authorId    String
  content     String?

  reportedAt   BigInt
  reportedBy   String
  reportReason String

  status ReportStatus @default(Pending)

  resolvedAt BigInt?
  resolvedBy String?

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model UserReport {
  // ID of the log
  id       String @id @map("_id")
  guildId  String
  targetId String

  reportedAt   BigInt
  reportedBy   String
  reportReason String

  status ReportStatus @default(Pending)

  resolvedAt BigInt?
  resolvedBy String?

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model BanRequest {
  // ID of the log
  id           String  @id @map("_id")
  guildId      String
  targetId     String
  // ID of the infraction that was created
  infractionId String?

  status RequestStatus @default(Pending)

  resolvedAt BigInt?
  resolvedBy String?

  requestedAt BigInt
  requestedBy String

  duration BigInt?
  reason   String

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model MuteRequest {
  // ID of the log
  id           String  @id @map("_id")
  guildId      String
  targetId     String
  // ID of the infraction that was created
  infractionId String?

  status RequestStatus @default(Pending)

  resolvedAt BigInt?
  resolvedBy String?

  requestedAt BigInt
  requestedBy String

  duration Int
  reason   String

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Message {
  id                    String   @id @map("_id")
  guildId               String
  authorId              String
  channelId             String
  channelParentId       String?
  channelParentParentId String?
  stickerId             String?
  // ID of the message this message is replying to
  referenceId           String?
  createdAt             BigInt
  content               String?
  attachments           String[]
  deleted               Boolean  @default(false)

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model ChannelLock {
  id      String @id @map("_id")
  guildId String
  allow   BigInt

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model ModerationCommand {
  enabled Boolean @default(true)

  // Surface level details
  guildId     String
  name        String @id @map("_id")
  description String

  // Case details
  action   InfractionType
  reason   String
  duration BigInt?

  // Other details
  additionalInfo    String?
  messageDeleteTime Int?

  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

type Permission {
  name  String
  roles String[]
  allow PermissionEnum[]
}

type EphemeralScope {
  commandName      String
  includedChannels String[]
  excludedChannels String[]
}
