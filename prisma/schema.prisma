generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum InfractionType {
  Warn
  Mute
  Kick
  Ban
  Unmute
  Unban
}

enum TaskType {
  Mute
  Ban
}

enum InfractionFlag {
  Automatic
  Native
}

enum ReportStatus {
  Pending
  Disregarded
  Accepted
  Denied
}

enum RequestStatus {
  Pending
  Disregarded
  Accepted
  Denied
}

enum PermissionEnum {
  Search_Infractions
  Manage_Message_Reports
  Manage_User_Reports
  Manage_Mute_Requests
  Manage_Ban_Requests
  Delete_Infractions
  Update_Infractions
  Lock_Channels
  Unlock_Channels
  Start_Lockdown
  End_Lockdown
  Override_Lockdown_Notificatons
}

model Guild {
  id String @id @map("_id")

  notification_webhook String?

  // Command settings
  command_disabled_list       String[]
  command_error_ttl           Int      @default(7500)
  command_temporary_reply_ttl Int      @default(5000)
  command_ephemeral_reply     Boolean  @default(true)

  // Component settings
  component_error_ttl           Int @default(5000)
  component_temporary_reply_ttl Int @default(5000)

  // Report settings
  message_reports_enabled               Boolean  @default(false)
  message_reports_webhook               String?
  message_reports_immune_roles          String[]
  message_reports_ping_roles            String[]
  message_reports_blacklist             String[]
  message_reports_require_member        Boolean  @default(true)
  message_reports_disregard_after       BigInt   @default(2592000000)
  message_reports_notify_status         Boolean  @default(true)
  message_reports_require_accept_reason Boolean  @default(false)
  message_reports_require_deny_reason   Boolean  @default(true)

  user_reports_enabled               Boolean  @default(false)
  user_reports_webhook               String?
  user_reports_immune_roles          String[]
  user_reports_ping_roles            String[]
  user_reports_blacklist             String[]
  user_reports_require_member        Boolean  @default(true)
  user_reports_disregard_after       BigInt   @default(2592000000)
  user_reports_notify_status         Boolean  @default(true)
  user_reports_require_accept_reason Boolean  @default(false)
  user_reports_require_deny_reason   Boolean  @default(true)

  report_logging_enabled Boolean @default(true)
  report_logging_webhook String?

  // Request settings
  ban_requests_enabled               Boolean  @default(false)
  ban_requests_webhook               String?
  ban_requests_immune_roles          String[]
  ban_requests_ping_roles            String[]
  ban_requests_require_accept_reason Boolean  @default(false)
  ban_requests_require_deny_reason   Boolean  @default(true)

  mute_requests_enabled               Boolean  @default(false)
  mute_requests_webhook               String?
  mute_requests_immune_roles          String[]
  mute_requests_ping_roles            String[]
  mute_requests_require_accept_reason Boolean  @default(false)
  mute_requests_require_deny_reason   Boolean  @default(true)

  request_logging_enabled Boolean @default(true)
  request_logging_webhook String?

  // Infraction settings
  require_warn_reason   Boolean @default(true)
  require_mute_reason   Boolean @default(true)
  require_kick_reason   Boolean @default(true)
  require_ban_reason    Boolean @default(true)
  require_unmute_reason Boolean @default(false)
  require_unban_reason  Boolean @default(false)

  notify_warn_action   Boolean @default(true)
  notify_mute_action   Boolean @default(true)
  notify_kick_action   Boolean @default(true)
  notify_ban_action    Boolean @default(true)
  notify_unmute_action Boolean @default(true)

  default_warn_duration BigInt @default(0)
  default_mute_duration BigInt @default(0)
  default_ban_duration  BigInt @default(0)

  default_additional_warn_info   String?
  default_additional_mute_info   String?
  default_additional_kick_info   String?
  default_additional_ban_info    String?
  default_additional_unmute_info String?

  native_moderation_integration Boolean @default(true)

  infraction_logging_enabled Boolean @default(true)
  infraction_logging_webhook String?

  // Message logging settings
  message_logging_enabled          Boolean  @default(true)
  message_logging_webhook          String?
  message_logging_ignored_channels String[]

  // Thread logging settings

  thread_logging_enabled          Boolean  @default(true)
  thread_logging_webhook          String?
  thread_logging_ignored_channels String[]

  // Voice logging settings

  voice_logging_enabled          Boolean  @default(true)
  voice_logging_webhook          String?
  voice_logging_ignored_channels String[]

  // Lockdown settings
  lockdown_channels         String[]
  lockdown_notify           Boolean  @default(true)
  lockdown_require_reason   Boolean  @default(true)
  lockdown_display_executor Boolean  @default(false)
  lockdown_overrides        BigInt   @default(377957124160)

  // JSON objects that use composite types

  permission_nodes PermissionNode[]
  ephemeral_scopes EphemeralScope[]

  // Relations
  moderation_commands Shortcut[]
  infractions         Infraction[]
  channel_locks       ChannelLock[]
  message_reports     MessageReport[]
  user_reports        UserReport[]
  ban_requests        BanRequest[]
  mute_requests       MuteRequest[]
  messages            Message[]
  tasks               Task[]
}

model Infraction {
  id          String          @id @map("_id")
  guild_id    String
  target_id   String
  executor_id String
  type        InfractionType  @default(Warn)
  reason      String
  created_at  BigInt
  expires_at  BigInt?
  flag        InfractionFlag?

  request_id        String?
  request_author_id String?

  task  Task?
  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade)
}

model Task {
  id            String   @id @map("_id")
  guild_id      String
  target_id     String
  infraction_id String   @unique
  type          TaskType
  expires_at    BigInt

  infraction Infraction? @relation(fields: [infraction_id], references: [id], onDelete: Cascade)
  guild      Guild       @relation(fields: [guild_id], references: [id], onDelete: Cascade)

  @@unique([target_id, guild_id, type])
}

model MessageReport {
  id           String  @id @map("_id")
  guild_id     String
  message_id   String
  reference_id String?
  message_url  String
  channel_id   String
  author_id    String
  content      String?

  reported_at   BigInt
  reported_by   String
  report_reason String

  status ReportStatus @default(Pending)

  resolved_at BigInt?
  resolved_by String?

  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade)
}

model UserReport {
  id        String @id @map("_id")
  guild_id  String
  target_id String

  reported_at   BigInt
  reported_by   String
  report_reason String

  status ReportStatus @default(Pending)

  resolved_at BigInt?
  resolved_by String?

  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade)
}

model BanRequest {
  id            String  @id @map("_id")
  guild_id      String
  target_id     String
  infraction_id String?

  status RequestStatus @default(Pending)

  resolved_at BigInt?
  resolved_by String?

  requested_at BigInt
  requested_by String

  duration BigInt?
  reason   String

  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade)
}

model MuteRequest {
  id            String  @id @map("_id")
  guild_id      String
  target_id     String
  infraction_id String?

  status RequestStatus @default(Pending)

  resolved_at BigInt?
  resolved_by String?

  requested_at BigInt
  requested_by String

  duration Int
  reason   String

  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade)
}

model Message {
  id           String   @id @map("_id")
  guild_id     String
  author_id    String
  channel_id   String
  sticker_id   String?
  reference_id String?
  created_at   BigInt
  content      String?
  attachments  String[]
  deleted      Boolean  @default(false)

  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade)
}

model ChannelLock {
  id         String @id @map("_id")
  guild_id   String
  overwrites BigInt

  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade)
}

model Shortcut {
  enabled Boolean @default(true)

  guild_id    String
  name        String @id @map("_id")
  description String

  action   InfractionType
  reason   String
  duration BigInt?

  additional_info     String?
  message_delete_time Int?

  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade)
}

type PermissionNode {
  name    String
  roles   String[]
  allowed PermissionEnum[]
}

type EphemeralScope {
  command_name      String
  included_channels String[]
  excluded_channels String[]
}
